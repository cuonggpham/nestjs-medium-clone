// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  bio       String?  @default("")
  image     String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles Article[]
  comments Comment[]

  // Follow relationships
  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
}

//favourited & favoritedCount will be added later
model Article {
  id          Int    @id @default(autoincrement())
  slug        String @unique
  title       String
  description String
  body        String @db.Text
  tagList     Json?

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  @@index([authorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([articleId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
